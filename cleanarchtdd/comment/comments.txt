We used src instead of features folder but anyways we will be adding our features here.
Our first feature will be "authentication" and we're adding it to our src folder.
We're always starting with the domain layer for a feature.
We'll be using this domain layer to fetch users, add users ect.
Then we're creating another folder named entities and we will be adding User class there.
The mock API that we created returns 4 fields as data so we need to add these fields to our user class.

We're adding repositories folder to domain folder and creating the authentication_repository file.
This will act as a contract and this will be a interface kinda since there is no interface feature in dart.
We're adding the "createUser" method's blueprint here.
It'll recieve 3 parameters excluding id because it will be created by the server.
Since we don't want a returned data, we will be using Future<void> type as return type.
Then we're adding "getUsers" method and it will return list of users.
Also since server can return with an error we have to be aware of these return types and we should add another return type in case of errors.

We have to deal with errors individually and they will be seperated from domain layer. 
We will create a failure file and we will create our interface there.
And we have to implement different failures as where did it happen. Like cache or API.
While we write our failure's type to code we shouldn't indicate what kind of failure of it is. Because we can change our code so we need to use loose coupling.

Since we use so much in the return type it became long. So we can shorten it with type definitions.

We should use use cases to define funcionality to our repository methods.
In the usescases folder we're creating "create_user" file to add funcionality. 
Since this method depends on the authentication_repository, CreateUser class should take repository as a parameter.
So we can implement the singularity to our project. Clean architecture!

Use case of the method can differ so we should explicitly show it. 
There will be methods that can take parameters or not.
If we add a call function to a class now we can use instances of the class to directly call the call method.

Since we created usescase types we can extend our usecases with these.
And we invoke repository's methods with this call method.

We don't test interfaces because of they're contracts and we don't test entities because they are the blueprints.
We actually test usecases in domain layer.

Before we test the units we need to ask 3 questions.
First question is "what does the class depend on?"
Second one is "how can we create the fake version of this dependency?"
Third question is "how do we control what our dependencies do?"

So no we need to create the mock version of authentication_repository we extend mock and implememnt AuthRepo.
And it will act as AuthRepo. 
Mockito is making it with code generation. 

We use 3 steps when we testing. 
Arrange(Stub or Hijack), Act and Assert.
Then we create an instance of our class named usecase... and we will initialize it later with setUp method.
While we stubbing we use when function and we send parameters as any() method. But we must initialize the resgisterFallbackValue with non-native objects if we use them. 
We should use thenAnswer method to return.
Then we must call our usecase method with its empty parameters and assign its return to a variable. 

Finally we can test with expect() method. It takes 2 parameters first one is what actually returned and second one is what we expect.
Then we use verify() method to actually verify if our usecase method called the repo.createUser method. And we can add called() method next to it so we can verify how many times it called.

At the end we need to ensure that nothing is interacted with our repository.

We actually done with domain layer.
Now we will create a data layer inside of authentication folder. 
Inside the data folder we're creating a models folder and this will contain our entities' models.

We have our user entity but it's kinda a blueprint. Actual implememntation of it is this model.
Our [UserModel] must extend the [User]. And we'll use super on constructors.
Then we have to write our toJson, fromJson, toMap, fromMap and copyWith methods.
Now it's time to test our [UserModel].
There's no dependency on our model now. So we need to start without mocking anything.
Actually we have to define a fake json file to use it on tests. So it'll be so easy.
We're creating [fixtures] folder inside of tests folder. And we have to create its reader file too.